#!/usr/bin/env bash

##
##  DUApost
##      :: post-install script for arch, debian, ubuntu systems
##  v1kn
##  https://github.com/v1kn/DUApost
##  2016/03/26
##

#   PREAMBLE [-
#   ========

##   Variables and startup [-
##   ---------------------

#   beautify echo messages
nl=$'\n==========\n'

#   define parent dir of the script
src=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) || exit
mkdir -p "$src"/saved-dots

#   redirect errors and output to logs
exec 1> >(tee -a "$src"/post.log)
exec 2> >(tee -a "$src"/post_err.log)

#   date, username
echo -e "${nl}"
date
echo -e "\nenter username:"
read user
echo -e "\nwelcome "$user". proceeding with the installation"${nl}""
hm="/home/"$user""

#   OS versions
osver=$(cat /etc/os-release | grep "^NAME" | cut -d\" -f 2)
ubu="Ubuntu"
arch="Arch Linux"
deb="Debian GNU/Linux"

#   specify dpkg action when updating config files during installation
dpk="-o Dpkg::Options::=\"--force-confdef --force-confold\""

#   intel fix for screen tearing in xfce
intel=$(cat<<EOF
Section "Device"
 Identifier "Intel Graphics"
 Driver "Intel"
 Option "AccelMethod" "sna"
 Option "TearFree" "true"
EndSection
EOF
)
##-]
##   Functions [-
##   ---------

#   installing intel fix
intel_ins() {
    [[ -f /etc/X11/xorg.conf.d/20-intel.conf ]] \
        && mv /etc/X11/xorg.conf.d/20-intel.conf \
        /etc/X11/xorg.conf.d/20-intel.conf.orig
    [[ ! -d /etc/X11/xorg.conf.d ]] && mkdir -p /etc/X11/xorg.conf.d
    echo -e "$intel" > /etc/X11/xorg.conf.d/20-intel.conf
}

#   install ruby and python packages as normal user
pip_gem() {
    cd "$hm" || exit
    echo -e ""${nl}"installing ruby gems"${nl}""
    gem install --install-dir "$hm"/.local/gem tmuxinator github-pages
    echo -e ""${nl}"installing pip packages"${nl}""
    virtualenv -p python3 "$hm"/.local/pyvenv
    source "$hm"/.local/pyvenv/bin/activate
    pip3 install $(< "$src"/pkg-pip)
    deactivate
}

#   setting up documents and dotfiles as normal user
unpack_docs() {
    cd "$hm" || exit
    echo -e ""${nl}"taking care of docs and dotfiles"${nl}""
    for origdot in .bashrc .profile .bash_profile .Xresources; do
        [[ -f "$origdot" ]] && mv "$origdot" "$src"/saved-dots/
    done
    #mkdir grepo && cd grepo
    #git clone https://github.com/v1kn/dotfiles
    aunpack -qq -f "$src"/dotfiles*.txz
    cd grepo/dotfiles
    while read dotfolder; do
        stow -v -t "$hm" "$dotfolder"
    done <<< $(find $(pwd) -mindepth 1 -maxdepth 1 -type d \
        | grep -v "\.git" \
        | sort)
    cd "$hm" || exit
}
viber_ins() {
    cd "$hm" || exit
    if [[ $(wget \
        "http://download.cdn.viber.com/cdn/desktop/Linux/viber.deb" 2>&1 \
        | grep "200 OK" | wc -l) == "1" ]]
    then
        dpkg -i viber.deb
        rm viber.deb
    else
        echo -e ""${nl}"No viber deb found. Install it manually later"${nl}""
    fi
}

err_corr() {
    dpkg --configure -a
    apt-get "$dpk" install -y -f
}
##-]
#-]
#   ARCH [-
#   ====
if [[ "$osver" = "$arch" ]]; then
    # update
    echo -e ""${nl}"updating the system"${nl}""
    reflector -c Poland -l 10 -f 5 --save /etc/pacman.d/mirrorlist
    # (--ask 36) is an undocumented flag that handles conflicts
    pacman -Syyu --ask 36 --noconfirm

    # install official software
    echo -e ""${nl}"installing missing software from the repos"${nl}""
    pacman -S --ask 36 --noconfirm $(< "$src"/pkg-arch)

    # system tweaks
    echo -e ""${nl}"tweaking the system"${nl}""
    intel_ins       # intel tear fix
    echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf #unloading pcspkr module

    # pacaur
    echo -e ""${nl}"installing pacaur"${nl}""
    su - "$user" <<EOF
    gpg --keyserver hkp://pgp.mit.edu --recv-keys 1EB2638FF56C0C53
    cd "$hm" || exit
    git clone https://aur.archlinux.org/cower.git
    cd cower
    makepkg -sir --noconfirm --asdeps
    git clone https://aur.archlinux.org/pacaur.git
    cd pacaur
    makepkg -sir --noconfirm
    cd "$hm"
    rm -rf cower

    # install AUR packages
    echo -e ""${nl}"installing packages from the AUR"${nl}""
    pacaur -ayu --noedit --noconfirm "$(< "$src"/pkg-arch-aur)"

    # ruby and python packages, dotfiles
    pip_gem
    unpack_docs
EOF

    echo -e ""${nl}"ALL DONE\nPlease check the install logs and then reboot"${nl}""
#-]
#   UBUNTU [-
#   ======
elif [[ "$osver" = "$ubu" ]]; then
    # set non-interactive environment
    export DEBIAN_FRONTEND=noninteractive

    # update
    echo -e ""${nl}"updating the system"${nl}""
    apt-get update && apt-get "$dpk" dist-upgrade -y
    err_corr

    # remove unwanted software
    echo -e ""${nl}"removing all unwanted software"${nl}""
    apt-get --purge remove -y $(< "$src"/pkgrm-ubudeb)
    apt-get --purge autoremove -y

    # check if PPAs are available for this ubuntu version
    dist=$(lsb_release -sc)
    echo -e ""${nl}"this is ubuntu "$dist""
    echo -e "checking if all PPAs are compatible with "$dist" "${nl}""
    while read -r ppa; do
        url="http://ppa.launchpad.net/"$ppa"/ubuntu/dists/"$dist"/"
        if [[ $(wget -O /dev/null "$url" 2>&1 | grep "200 OK" | wc -l) = "0" ]]
        then
            echo -e "ppa:"$ppa" does not have a "$dist" version"
            echo "$ppa" >> "$src"/failed-ppas
        else
            echo -e ""${nl}"adding "$ppa" "${nl}""
            add-apt-repository -y ppa:"$ppa"
        fi
    done < "$src"/ppa-ubu
    apt-get update && apt-get "$dpk" dist-upgrade -y
    err_corr

    # install packages
    echo -e ""${nl}"installing software from the repos and PPAs"${nl}""
    apt-get install "$dpk" -y $(< "$src"/pkg-ubu)
    viber_ins

    # intel fix
    intel_ins

    # mountpoint fix
    [[ -d /media/"$user" ]] && rmdir /media/"$user"
    ln -s /media /media/"$user"

    # ruby, python, dotfiles
    pip3 install virtualenv
    su - "$user" <<EOF
    pip_gem
    unpack_docs
EOF

    echo -e ""${nl}"ALL DONE\nPlease check the install logs and then reboot"${nl}""
#-]
#   DEBIAN [-
#   ======
elif [[ "$osver" = "$deb" ]]; then
    # set non-interactive environment
    export DEBIAN_FRONTEND=noninteractive

    # update the system
    echo -e ""${nl}"updating the system"${nl}""
    apt-get update && apt-get "$dpk" dist-upgrade -y
    err_corr

    # remove unwanted software
    echo -e ""${nl}"removing all unwanted software"${nl}""
    apt-get --purge remove -y $(< "$src"/pkgrm-ubudeb)
    apt-get --purge autoremove -y

    # update to Stretch
    mv /etc/apt/sources.list /etc/apt/sources.list.orig
    cp "$src"/sources-deb /etc/apt/sources.list
    apt-get update && apt-get "$dpk" dist-upgrade -y
    err_corr

    # install packages
    echo -e ""${nl}"installing software from the repos"${nl}""
    apt-get "$dpk" install -y $(< "$src"/pkg-deb)
    err_corr
    viber_ins

    # intel fix
    intel_ins

    # mountpoint fix
    [[ -d /media/"$user" ]] && rmdir /media/"$user"
    ln -s /media /media/"$user"

    # ruby, python, dotfiles
    pip3 install virtualenv
    su - "$user" <<EOF
    pip_gem
    unpack_docs
EOF

    echo -e ""${nl}"ALL DONE\nPlease check the install logs and reboot"${nl}""
#-]
else
    echo -e ""${nl}"ERROR: Unrecognized system.\nTarget OSes are:"
    echo -e "\t1. "$arch"\n\t2. "$deb"\n\t3. "$ubu"\nexiting"${nl}""
    exit 1
fi
