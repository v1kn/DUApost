#!/usr/bin/env bash

##
##  DUApost
##      :: post-install script for arch, debian, ubuntu systems
##  v1kn
##  https://github.com/v1kn/DUApost
##  2016/03/26
##

#   PREAMBLE [-
#   ========

##   Variables and startup [-
##   ---------------------

#   beautify echo messages
nl=$'\n==========\n'

#   define parent dir of the script
src=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) || exit
mkdir -p "$src"/saved-dots

#   redirect errors and output to logs
exec 1> >(tee -a "$src"/post.log)
exec 2> >(tee -a "$src"/post_err.log)

#   Q&A
echo -e "${nl}"
date
echo -e "\nenter username:"
read user
echo -e "\nenter country:"
read country
echo -e "\nenter graphics:"
read vga
echo -e "\nwelcome "$user". proceeding with the installation${nl}"
hm="/home/"$user""

#   OS versions
osver=$(cat /etc/os-release | grep "^NAME" | cut -d\" -f 2)
ubu="Ubuntu"
arch="Arch Linux"
deb="Debian GNU/Linux"

#   specify dpkg action when updating config files during installation
dpk="-o Dpkg::Options::=\"--force-confdef --force-confnew\""

#   intel fix for screen tearing in xfce
intel=$(cat<<EOF
Section "Device"
 Identifier "Intel Graphics"
 Driver "Intel"
 Option "AccelMethod" "sna"
 Option "TearFree" "true"
EndSection
EOF
)
##-]
##   Functions [-
##   ---------

#   installing gpu fix
nvidia_ins(){
    nvidia-settings --assign CurrentMetaMode="nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }"
    systemd service?
}
intel_ins() {
    [[ -f /etc/X11/xorg.conf.d/20-intel.conf ]] \
        && mv /etc/X11/xorg.conf.d/20-intel.conf \
        /etc/X11/xorg.conf.d/20-intel.conf.orig
    [[ ! -d /etc/X11/xorg.conf.d ]] && mkdir -p /etc/X11/xorg.conf.d
    echo -e "$intel" > /etc/X11/xorg.conf.d/20-intel.conf
}
gpu_ins(){}

#   install ruby, python packages and dots as normal user
pyrubydot_ins() {
    cd "$hm"
    mkdir -p "$hm"/grepo "$hm"/.local/bin

    echo -e "${nl}installing ruby gems${nl}"
    gem install --user-install tmuxinator github-pages

    echo -e "${nl}installing pip packages${nl}"
    virtualenv -p python3 "$hm"/.local/pyvenv
    source "$hm"/.local/pyvenv/bin/activate
    pip3 install -r "$src"/pkg-pip
    deactivate

    echo -e "${nl}aggregating user binaries${nl}"
    cd "$hm"/grepo
    git clone https://github.com/v1kn/bin
    cd "$hm"
    local dirs=""$hm"/grepo/bin "$hm"/.local/pyvenv/bin "$hm"/.gem/ruby/2.3.0/bin"
    find "$dirs" \
        -follow \
        -mindepth 1 \
        -maxdepth 1 \
        -type f \
        -executable \
        -exec ln -s {} "$hm"/.local/bin \;
}
dots_ins() {
    cd "$hm"/grepo
    git clone https://github.com/v1kn/dotfiles
    while read stowdir; do
        stow -d "$hm"/grepo/dotfiles -t "$hm" "$stowdir"
    done < "$hm"/pkg-stow
}

wget_ins() {
    mkdir -p "$hm"/debs
    cd "$hm"/debs
    while read sftwr; do
        wget "$sftwr"
    done < "$src"/pkg-wget
    gdebi --n --q *.deb
    cd "$hm"
    rm -rf debs
}

systemd_ins() {
    [[ -d "$hm"/grepo/dotfiles ]]

}

dpkg_fix() {
    dpkg --configure -a
    apt-get "$dpk" install -y -f
}

spotsubl_ins() {
    apt-key adv \
        --keyserver hkp://keyserver.ubuntu.com:80 \
        --recv-keys \
            BBEBDCB318AD50EC6865090613B00F1FD2C19886 \
            0DF731E45CE24F27EEEB1450EFDC8610341D9410
    wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg \
        | sudo apt-key add -
    echo deb http://repository.spotify.com stable non-free \
        | tee /etc/apt/sources.list.d/spotify.list
    echo "deb https://download.sublimetext.com/ apt/dev/" \
        | tee /etc/apt/sources.list.d/sublime-text.list
    apt-get update
    apt-get "$dpk" install -y spotify-client sublime-text
    dpkg_fix
}
##-]
#-]
#   ARCH [-
#   ====
if [[ "$osver" = "$arch" ]]; then
    # update
    echo -e "${nl}updating the system${nl}"
    reflector -c "$country" -l 10 -f 5 --save /etc/pacman.d/mirrorlist
    # (--ask 36) is an undocumented flag that handles conflicts
    if [[ "$vga" = [nN]vidia ]]; then
        pacman -S nvidia-libgl --noconfirm
    else
        pacman -S mesa-libgl --noconfirm
    fi
    pacman -Rns vim --noconfirm
    pacman -Syyu --noconfirm
    pacman -S multilib-devel --noconfirm --ask 36

    # install official software
    echo -e "${nl}installing missing software from the repos${nl}"
    pacman -S --noconfirm $(< "$src"/pkg-arch)
    mkinitcpio -p linux
    mkinitcpio -p linux-lts
    grub-mkconfig -o /boot/grub/grub.cfg

    # system tweaks
    echo -e "${nl}tweaking the system${nl}"
    [[ "$vga" = [iI]ntel ]] && intel_ins       # intel tear fix
    echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf #unloading pcspkr module

    # pacaur
    echo -e "${nl}installing pacaur${nl}"
    su - "$user" <<EOF
    gpg --keyserver hkp://pgp.mit.edu --recv-keys 1EB2638FF56C0C53
    cd "$hm" || exit
    git clone https://aur.archlinux.org/cower.git
    cd cower
    makepkg -sir --noconfirm --asdeps
    git clone https://aur.archlinux.org/pacaur.git
    cd pacaur
    makepkg -sir --noconfirm
    cd "$hm"
    rm -rf cower

    # install AUR packages
    echo -e "${nl}installing packages from the AUR${nl}"
    pacaur -ayu --noedit --noconfirm "$(< "$src"/pkg-arch-aur)"

    # ruby and python packages, dotfiles
    pip_gem
EOF

    echo -e "${nl}ALL DONE\nPlease check the install logs and then reboot${nl}"
#-]
#   UBUNTU [-
#   ======
elif [[ "$osver" = "$ubu" ]]; then
    # set non-interactive environment
    export DEBIAN_FRONTEND=noninteractive

    # update
    echo -e "${nl}updating the system${nl}"
    apt-get update && apt-get "$dpk" dist-upgrade -y
    dpkg_fix

    # remove unwanted software
    echo -e "${nl}removing all unwanted software${nl}"
    apt-get --purge remove -y $(< "$src"/pkgrm-ubudeb)
    apt-get --purge autoremove -y

    # check if PPAs are available for this ubuntu version
    dist=$(lsb_release -sc)
    echo -e "${nl}this is ubuntu "$dist""
    echo -e "checking if all PPAs are compatible with "$dist" ${nl}"
    while read -r ppa; do
        url="http://ppa.launchpad.net/"$ppa"/ubuntu/dists/"$dist"/"
        if [[ $(wget -O /dev/null "$url" 2>&1 | grep "200 OK" | wc -l) = "0" ]]
        then
            echo -e "ppa:"$ppa" does not have a "$dist" version"
            echo "$ppa" >> "$src"/failed-ppas
        else
            echo -e "${nl}adding "$ppa" ${nl}"
            add-apt-repository -y ppa:"$ppa"
        fi
    done < "$src"/ppa-ubu
    apt-get update && apt-get "$dpk" dist-upgrade -y
    dpkg_fix

    # installing software
    echo -e "${nl}installing software${nl}"
    apt-get install "$dpk" -y $(< "$src"/pkg-ubu)
    apt-get install "$dpk" -y $(< "$src"/pkg-ppa)
    snap install $(< "$src"/pkg-snap)
    wget_ins
    spotsubl_ins
    su - "$user" <<EOF
    pyrubydot_ins
EOF

    # system tweaks
    echo -e "${nl}performing system tweaks${nl}"
    gpu_ins
    systemd_ins
    [[ -d /media/"$user" ]] \
        && rmdir /media/"$user" \
        && ln -s /media /media/"$user"

    echo -e "${nl}ALL DONE\nPlease check the install logs and then reboot${nl}"
#-]
#   DEBIAN [-
#   ======
elif [[ "$osver" = "$deb" ]]; then
    # set non-interactive environment
    export DEBIAN_FRONTEND=noninteractive

    # update the system
    echo -e "${nl}updating the system${nl}"
    apt-get update && apt-get "$dpk" dist-upgrade -y
    dpkg_fix

    # remove unwanted software
    echo -e "${nl}removing all unwanted software${nl}"
    apt-get --purge remove -y $(< "$src"/pkgrm-ubudeb)
    apt-get --purge autoremove -y

    # update to Stretch
    mv /etc/apt/sources.list /etc/apt/sources.list.orig
    cp "$src"/sources-deb /etc/apt/sources.list
    apt-get update && apt-get "$dpk" dist-upgrade -y
    dpkg_fix

    # install packages
    echo -e "${nl}installing software from the repos${nl}"
    apt-get "$dpk" install -y $(< "$src"/pkg-deb)
    dpkg_fix
    viber_ins

    # intel fix
    intel_ins

    # mountpoint fix
    [[ -d /media/"$user" ]] && rmdir /media/"$user"
    ln -s /media /media/"$user"

    # ruby, python, dotfiles
    pip3 install virtualenv
    su - "$user" <<EOF
    pip_gem
EOF

    echo -e "${nl}ALL DONE\nPlease check the install logs and reboot${nl}"
#-]
else
    echo -e "${nl}ERROR: Unrecognized system.\nTarget OSes are:"
    echo -e "\t1. "$arch"\n\t2. "$deb"\n\t3. "$ubu"\nexiting${nl}"
    exit 1
fi
